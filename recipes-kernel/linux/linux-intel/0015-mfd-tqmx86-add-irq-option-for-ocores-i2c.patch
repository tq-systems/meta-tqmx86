From 9d792a9a699ade0b4fa67766508649cdae054c8b Mon Sep 17 00:00:00 2001
From: Gregor Herburger <gregor.herburger@tq-group.com>
Date: Fri, 20 May 2022 14:35:02 +0200
Subject: [PATCH] mfd: tqmx86: add irq option for ocores-i2c

The i2c-ocores controller can run in interrupt mode on tqmx86 modules.
Add module parameter to allow handling the irq number to the i2c-ocores
driver and configuring the interrupt on the tqmx86 module.

Signed-off-by: Gregor Herburger <gregor.herburger@tq-group.com>
---
 drivers/mfd/tqmx86.c | 106 +++++++++++++++++++++++++++++++------------
 1 file changed, 76 insertions(+), 30 deletions(-)

diff --git a/drivers/mfd/tqmx86.c b/drivers/mfd/tqmx86.c
index 579c7fe2040ee..35cdd63d2636d 100644
--- a/drivers/mfd/tqmx86.c
+++ b/drivers/mfd/tqmx86.c
@@ -50,15 +50,26 @@
 #define TQMX86_REG_IO_EXT_INT_MASK		0x3
 #define TQMX86_REG_IO_EXT_INT_GPIO_SHIFT	4
 #define TQMX86_REG_SAUC		0x17
+#define TQMX86_REG_IO_EXT_INT_I2C_SHIFT		0
 
 #define TQMX86_REG_I2C_DETECT	0x1a7
 #define TQMX86_REG_I2C_DETECT_SOFT		0xa5
 
+struct tqmx86_data {
+	void __iomem	*io_base;
+	struct device	*dev;
+};
+
 static uint gpio_irq;
 module_param(gpio_irq, uint, 0);
 MODULE_PARM_DESC(gpio_irq, "GPIO IRQ number (7, 9, 12)");
 
-static const struct resource tqmx_i2c_soft_resources[] = {
+static uint i2c_irq;
+module_param(i2c_irq, uint, 0);
+MODULE_PARM_DESC(i2c_irq, "I2C IRQ number (7, 9, 12)");
+
+static struct resource tqmx_i2c_soft_resources[] = {
+	DEFINE_RES_IRQ(0),
 	DEFINE_RES_IO(TQMX86_IOBASE_I2C, TQMX86_IOSIZE_I2C),
 };
 
@@ -233,38 +244,69 @@ static int tqmx86_board_id_to_clk_rate(struct device *dev, u8 board_id)
 	}
 }
 
-static int tqmx86_probe(struct platform_device *pdev)
+static int tqmx86_irq_to_irq_cfg(struct tqmx86_data *data, u8 irq)
 {
-	const struct tqmx86_gpio_platform_data *gpio_pdata;
-	u8 board_id, sauc, rev, i2c_det, io_ext_int_val, pcb_rev, pld_rev;
-	struct device *dev = &pdev->dev;
-	u8 gpio_irq_cfg, readback;
-	const char *board_name;
-	void __iomem *io_base;
-	int err;
-
-	switch (gpio_irq) {
+	switch (irq) {
 	case 0:
-		gpio_irq_cfg = TQMX86_REG_IO_EXT_INT_NONE;
-		break;
+		return TQMX86_REG_IO_EXT_INT_NONE;
 	case 7:
-		gpio_irq_cfg = TQMX86_REG_IO_EXT_INT_7;
-		break;
+		return TQMX86_REG_IO_EXT_INT_7;
 	case 9:
-		gpio_irq_cfg = TQMX86_REG_IO_EXT_INT_9;
-		break;
+		return TQMX86_REG_IO_EXT_INT_9;
 	case 12:
-		gpio_irq_cfg = TQMX86_REG_IO_EXT_INT_12;
-		break;
+		return TQMX86_REG_IO_EXT_INT_12;
 	default:
-		pr_err("tqmx86: Invalid GPIO IRQ (%d)\n", gpio_irq);
+		dev_err(data->dev, "tqmx86: Invalid IRQ (%d)\n", irq);
+		return -EINVAL;
+	}
+}
+
+static int tqmx86_setup_irq(struct tqmx86_data *data, u8 irq, u8 reg_shift)
+{
+	u8 val, readback;
+	int irq_cfg;
+
+	irq_cfg = tqmx86_irq_to_irq_cfg(data, irq);
+	if (irq_cfg < 0)
+		return irq_cfg;
+
+	val = ioread8(data->io_base + TQMX86_REG_IO_EXT_INT);
+	val &= ~(TQMX86_REG_IO_EXT_INT_MASK << reg_shift);
+	val |= (irq_cfg & TQMX86_REG_IO_EXT_INT_MASK) << reg_shift;
+
+	iowrite8(val, data->io_base + TQMX86_REG_IO_EXT_INT);
+	readback = ioread8(data->io_base + TQMX86_REG_IO_EXT_INT);
+	if (readback != val) {
+		dev_warn(data->dev, "interrupt not supported.\n");
 		return -EINVAL;
 	}
 
+	return 0;
+}
+
+static int tqmx86_probe(struct platform_device *pdev)
+{
+	const struct tqmx86_gpio_platform_data *gpio_pdata;
+	u8 board_id, sauc, rev, i2c_det, pcb_rev, pld_rev;
+	struct device *dev = &pdev->dev;
+	struct tqmx86_data *data;
+	const char *board_name;
+	void __iomem *io_base;
+	int err;
+
+	data = devm_kzalloc(dev, sizeof(*data), GFP_KERNEL);
+	if (!data)
+		return -ENOMEM;
+
 	io_base = devm_ioport_map(dev, TQMX86_IOBASE, TQMX86_IOSIZE);
 	if (!io_base)
 		return -ENOMEM;
 
+	data->dev = &pdev->dev;
+	data->io_base = io_base;
+
+	platform_set_drvdata(pdev, data);
+
 	board_id = ioread8(io_base + TQMX86_REG_BOARD_ID);
 	sauc = ioread8(io_base + TQMX86_REG_SAUC);
 	board_name = tqmx86_board_id_to_name(board_id, sauc);
@@ -282,16 +324,10 @@ static int tqmx86_probe(struct platform_device *pdev)
 	 * unmap.
 	 */
 	i2c_det = inb(TQMX86_REG_I2C_DETECT);
-
-	if (gpio_irq_cfg) {
-		io_ext_int_val =
-			gpio_irq_cfg << TQMX86_REG_IO_EXT_INT_GPIO_SHIFT;
-		iowrite8(io_ext_int_val, io_base + TQMX86_REG_IO_EXT_INT);
-		readback = ioread8(io_base + TQMX86_REG_IO_EXT_INT);
-		if (readback != io_ext_int_val) {
-			dev_warn(dev, "GPIO interrupts not supported.\n");
-			return -EINVAL;
-		}
+	if (gpio_irq) {
+		err = tqmx86_setup_irq(data, gpio_irq, TQMX86_REG_IO_EXT_INT_GPIO_SHIFT);
+		if (err)
+			return err;
 
 		/* Assumes the IRQ resource is first. */
 		tqmx_gpio_resources[0].start = gpio_irq;
@@ -302,6 +338,16 @@ static int tqmx86_probe(struct platform_device *pdev)
 	ocores_platform_data.clock_khz = tqmx86_board_id_to_clk_rate(dev, board_id);
 
 	if (i2c_det == TQMX86_REG_I2C_DETECT_SOFT) {
+		if (i2c_irq) {
+			err = tqmx86_setup_irq(data, i2c_irq, TQMX86_REG_IO_EXT_INT_I2C_SHIFT);
+			if (err)
+				return err;
+
+			tqmx_i2c_soft_resources[0].start = i2c_irq;
+		} else {
+			tqmx_i2c_soft_resources[0].flags = 0;
+		}
+
 		err = devm_mfd_add_devices(dev, PLATFORM_DEVID_NONE,
 					   tqmx86_i2c_soft_dev,
 					   ARRAY_SIZE(tqmx86_i2c_soft_dev),

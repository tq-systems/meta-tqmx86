From 502f7da0494ae0ae5954a42ffbc0a897206bd314 Mon Sep 17 00:00:00 2001
From: Gregor Herburger <gregor.herburger@tq-group.com>
Date: Tue, 15 Mar 2022 09:40:21 +0100
Subject: [PATCH] gpio: gpio-tqmx86: add support for new interrupt registers

With the new PLD revision on the SMARC module TQMxE40s all 14 GPIOs now
support interrupts. Add support for the corresponding registers to the
driver.

Signed-off-by: Gregor Herburger <gregor.herburger@tq-group.com>
---
 drivers/gpio/gpio-tqmx86.c | 19 ++++++++++++++++++-
 1 file changed, 18 insertions(+), 1 deletion(-)

diff --git a/drivers/gpio/gpio-tqmx86.c b/drivers/gpio/gpio-tqmx86.c
index 50e7c42f49415..8a620c2781817 100644
--- a/drivers/gpio/gpio-tqmx86.c
+++ b/drivers/gpio/gpio-tqmx86.c
@@ -29,6 +29,8 @@
 #define TQMX86_GPIIC2	7	/* GPI Interrupt Configuration Register 2 */
 #define TQMX86_GPIIC3	8	/* GPI Interrupt Configuration Register 3 */
 #define TQMX86_GPIIS2	9	/* GPI Interrupt Status Register 2 */
+#define TQMX86_GPIIC4	12	/* GPI Interrupt Configuration Register 4 */
+#define TQMX86_GPIIS3	13	/* GPI Interrupt Status Register 3 */
 
 #define TQMX86_GPII_DISABLE	0
 #define TQMX86_GPII_FALLING	BIT(0)
@@ -80,8 +82,10 @@ static unsigned int tqmx86_gpio_reg_gpiic(unsigned int offset)
 		return TQMX86_GPIIC;
 	else if (offset < 8)
 		return TQMX86_GPIIC2;
-	else
+	else if (offset < 12)
 		return TQMX86_GPIIC3;
+	else
+		return TQMX86_GPIIC4;
 }
 
 static unsigned int tqmx86_gpio_shift_gpiic(unsigned int offset)
@@ -294,6 +298,10 @@ static void tqmx86_gpio_irq_handler(struct irq_desc *desc)
 		irq_status = tqmx86_gpio_read(gpio, TQMX86_GPIIS2);
 		irq_bits |= irq_status << 4;
 	}
+	if (nirq > 12) {
+		irq_status = tqmx86_gpio_read(gpio, TQMX86_GPIIS3);
+		irq_bits |= irq_status << 12;
+	}
 
 	for_each_set_bit(i, &irq_bits, nirq)
 		if (gpio->irq_type[i] == TQMX86_GPII_BOTH)
@@ -302,6 +310,8 @@ static void tqmx86_gpio_irq_handler(struct irq_desc *desc)
 	tqmx86_gpio_write(gpio, irq_bits & 0xf, TQMX86_GPIIS);
 	if (nirq > 4)
 		tqmx86_gpio_write(gpio, (irq_bits >> 4) & 0xff, TQMX86_GPIIS2);
+	if (nirq > 12)
+		tqmx86_gpio_write(gpio, (irq_bits >> 12) & 0xff, TQMX86_GPIIS3);
 
 	raw_spin_unlock_irqrestore(&gpio->spinlock, flags);
 
@@ -424,6 +434,8 @@ static int tqmx86_gpio_probe(struct platform_device *pdev)
 			tqmx86_gpio_write(gpio, 0, TQMX86_GPIIC2);
 		if (nirq > 8)
 			tqmx86_gpio_write(gpio, 0, TQMX86_GPIIC3);
+		if (nirq > 12)
+			tqmx86_gpio_write(gpio, 0, TQMX86_GPIIC4);
 
 		/* Clear all pending interrupts */
 		irq_status = tqmx86_gpio_read(gpio, TQMX86_GPIIS);
@@ -434,6 +446,11 @@ static int tqmx86_gpio_probe(struct platform_device *pdev)
 			tqmx86_gpio_write(gpio, irq_status, TQMX86_GPIIS2);
 		}
 
+		if (nirq > 12) {
+			irq_status = tqmx86_gpio_read(gpio, TQMX86_GPIIS3);
+			tqmx86_gpio_write(gpio, irq_status, TQMX86_GPIIS3);
+		}
+
 		girq = &chip->irq;
 		girq->chip = irq_chip;
 		girq->parent_handler = tqmx86_gpio_irq_handler;

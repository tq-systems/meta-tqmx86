From 323c1c5222d5812a7fdc218771d7f05f441b8e06 Mon Sep 17 00:00:00 2001
From: Gregor Herburger <gregor.herburger@tq-group.com>
Date: Fri, 20 May 2022 12:50:27 +0200
Subject: [PATCH] i2c: busses: i2c-ocores: generate stop condition after
 timeout

In polling mode, no stop condition is generated after a timeout. This
causes SCL to remain low and thereby blocking the bus. If this happens
during a transfer it can cause slaves to misinterpret the subsequent
transfer and return wrong values.

Assert stop condition after timeout to release bus and allow the
subsequent transfer start from a defined state.

Also make ocores_process_polling return the -ETIMEDOUT so
ocores_xfer_core can return the error to the i2c core system.

Signed-off-by: Gregor Herburger <gregor.herburger@tq-group.com>
---
 drivers/i2c/busses/i2c-ocores.c | 15 +++++++++------
 1 file changed, 9 insertions(+), 6 deletions(-)

diff --git a/drivers/i2c/busses/i2c-ocores.c b/drivers/i2c/busses/i2c-ocores.c
index a0af027db04c1..d5310f2344ecf 100644
--- a/drivers/i2c/busses/i2c-ocores.c
+++ b/drivers/i2c/busses/i2c-ocores.c
@@ -343,17 +343,15 @@ static int ocores_poll_wait(struct ocores_i2c *i2c)
  *
  * It can run in atomic context
  */
-static void ocores_process_polling(struct ocores_i2c *i2c)
+static int ocores_process_polling(struct ocores_i2c *i2c)
 {
 	while (1) {
 		irqreturn_t ret;
 		int err;
 
 		err = ocores_poll_wait(i2c);
-		if (err) {
-			i2c->state = STATE_ERROR;
-			break; /* timeout */
-		}
+		if (err)
+			return err;
 
 		ret = ocores_isr(-1, i2c);
 		if (ret == IRQ_NONE)
@@ -364,6 +362,7 @@ static void ocores_process_polling(struct ocores_i2c *i2c)
 					break;
 		}
 	}
+	return 0;
 }
 
 static int ocores_xfer_core(struct ocores_i2c *i2c,
@@ -388,7 +387,11 @@ static int ocores_xfer_core(struct ocores_i2c *i2c,
 	oc_setreg(i2c, OCI2C_CMD, OCI2C_CMD_START);
 
 	if (polling) {
-		ocores_process_polling(i2c);
+		ret = ocores_process_polling(i2c);
+		if (ret) {
+			ocores_process_timeout(i2c);
+			return ret;
+		}
 	} else {
 		ret = wait_event_timeout(i2c->wait,
 					 (i2c->state == STATE_ERROR) ||
